## WMPR Requests Panel - Service Desk Footer
## Uses React component with atlas-kit for enhanced UI

## Web resources are loaded automatically via web-panel dependencies
## No need to manually require - this can cause conflicts

<!-- IKKKKKKE-TEMPLATE-050 - Velocity Template Loading Check -->
<!-- Container for the React component with fallback -->
<div id="wmpr-react-table" class="wmpr-react-container">
    <!-- React component will render here -->
    <div id="wmpr-loading-fallback" style="text-align: center; padding: 20px; color: #626f86;">
        <div style="display: inline-block; width: 16px; height: 16px; border: 2px solid #0052cc; border-top: 2px solid transparent; border-radius: 50%; animation: wmpr-spin 1s linear infinite;"></div>
        <p style="margin: 10px 0 0 0; font-size: 12px;">Loading WMPR requests...</p>
        <small style="color: #999; font-size: 10px;">IKKKKKKE-TEMPLATE-051: Loading Fallback Active</small>
    </div>
    
    <!-- Fallback HTML table (hidden by default) -->
    <div id="wmpr-fallback-table" style="display: none;">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; padding: 10px 0; border-bottom: 1px solid #dfe1e6;">
            <h4 style="margin: 0; font-size: 14px; color: #172b4d;">Recent WMPR Service Desk Requests</h4>
            <small style="color: #999; font-size: 10px;">IKKKKKKE-TEMPLATE-052: Vanilla JS Fallback Active</small>
            <button id="wmpr-refresh-btn" style="padding: 4px 8px; font-size: 11px; background: #f4f5f7; border: 1px solid #dfe1e6; border-radius: 3px; cursor: pointer;">
                Refresh
            </button>
        </div>
        
        <div id="wmpr-table-content">
            <table style="width: 100%; border-collapse: collapse; font-size: 12px;">
                <thead>
                    <tr style="background: #f4f5f7; border-bottom: 1px solid #dfe1e6;">
                        <th style="padding: 8px; text-align: left; font-weight: bold;">Request</th>
                        <th style="padding: 8px; text-align: left; font-weight: bold;">Summary</th>
                        <th style="padding: 8px; text-align: left; font-weight: bold;">Reporter</th>
                        <th style="padding: 8px; text-align: left; font-weight: bold;">Created</th>
                        <th style="padding: 8px; text-align: left; font-weight: bold;">Status</th>
                    </tr>
                </thead>
                <tbody id="wmpr-table-body">
                    <tr>
                        <td colspan="5" style="padding: 20px; text-align: center; color: #626f86;">
                            Loading requests...
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    
    <!-- Basic server-side fallback (visible if all else fails) -->
    <div id="wmpr-basic-fallback" style="display: none; padding: 15px; background: #f4f5f7; border: 1px solid #dfe1e6; border-radius: 3px;">
        <h4 style="margin: 0 0 10px 0; font-size: 14px; color: #172b4d;">WMPR Requests</h4>
        <p style="margin: 0; font-size: 12px; color: #626f86;">
            Unable to load dynamic content. 
            <a href="/rest/wmpr-requests/1.0/recent" target="_blank" style="color: #0052cc;">View raw data</a> or 
            <a href="#" onclick="window.location.reload(); return false;" style="color: #0052cc;">reload page</a>.
        </p>
        <small style="color: #999; font-size: 10px;">IKKKKKKE-TEMPLATE-053: Basic Fallback Active</small>
    </div>
</div>

<style>
/* Loading animation for fallback */
@keyframes wmpr-spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Enhanced container styling */
.wmpr-react-container {
    margin: 20px 0;
    background: #ffffff;
    border: 1px solid #dfe1e6;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
}

/* Hide fallback loading when React component loads */
.wmpr-react-container.react-loaded #wmpr-loading-fallback {
    display: none;
}

/* Responsive design */
@media (max-width: 768px) {
    .wmpr-react-container {
        margin: 15px 0;
        padding: 15px;
        border-radius: 6px;
    }
}
</style>

<script type="text/javascript">
// IKKKKKKE-TEMPLATE-054 - JavaScript Initialization Check
console.log('[IKKKKKKE-TEMPLATE-054] WMPR Template Script Loading Started');

// Initialize the React component when the page loads
(function() {
    'use strict';
    
    let retryCount = 0;
    const maxRetries = 60; // Increased to 30 seconds (60 * 500ms)
    let fallbackMode = 'react'; // 'react', 'vanilla', 'basic'
    
    // Enhanced debugging information
    console.log('[IKKKKKKE-TEMPLATE-055] ===== INITIALIZATION DEBUG =====');
    console.log('[IKKKKKKE-TEMPLATE-056] DOM ready state:', document.readyState);
    console.log('[IKKKKKKE-TEMPLATE-057] Available globals:', Object.keys(window).filter(k => k.toLowerCase().includes('wmpr')));
    console.log('[IKKKKKKE-TEMPLATE-058] React available:', typeof window.React);
    console.log('[IKKKKKKE-TEMPLATE-059] ReactDOM available:', typeof window.ReactDOM);
    console.log('[IKKKKKKE-TEMPLATE-060] AJS available:', typeof window.AJS);
    console.log('[IKKKKKKE-TEMPLATE-061] WMPR global available:', typeof window.WMPR);
    
    function initWMPRReactComponent() {
        console.log('[IKKKKKKE-TEMPLATE-062] Initializing React component... (attempt ' + (retryCount + 1) + ')');
        console.log('[IKKKKKKE-TEMPLATE-063] Checking for initWMPRRequestsTable function...');
        console.log('[IKKKKKKE-TEMPLATE-064] Function type:', typeof window.initWMPRRequestsTable);
        console.log('[IKKKKKKE-TEMPLATE-065] WMPR global type:', typeof window.WMPR);
        
        // Check multiple ways the function might be exposed
        let initFunction = null;
        
        if (typeof window.initWMPRRequestsTable === 'function') {
            initFunction = window.initWMPRRequestsTable;
            console.log('[IKKKKKKE-TEMPLATE-066] Found function at window.initWMPRRequestsTable');
        } else if (typeof window.WMPR === 'object' && window.WMPR && typeof window.WMPR.initWMPRRequestsTable === 'function') {
            initFunction = window.WMPR.initWMPRRequestsTable;
            console.log('[IKKKKKKE-TEMPLATE-067] Found function at window.WMPR.initWMPRRequestsTable');
        } else if (typeof window.WMPR === 'function') {
            // In case WMPR is the function itself
            initFunction = window.WMPR;
            console.log('[IKKKKKKE-TEMPLATE-068] Found function at window.WMPR (direct)');
        }
        
        if (initFunction) {
            try {
                console.log('[IKKKKKKE-TEMPLATE-069] Found initialization function, calling...');
                // Initialize the React component
                initFunction('wmpr-react-table');
                
                // Mark container as loaded
                const container = document.getElementById('wmpr-react-table');
                if (container) {
                    container.classList.add('react-loaded');
                }
                
                console.log('[IKKKKKKE-TEMPLATE-070] React component initialized successfully');
                return true; // Success
            } catch (error) {
                console.error('[IKKKKKKE-TEMPLATE-071] Error initializing React component:', error);
                console.error('[IKKKKKKE-TEMPLATE-072] Error stack:', error.stack);
                fallbackToVanillaJS();
                return false;
            }
        } else {
            retryCount++;
            if (retryCount < maxRetries) {
                console.warn('[IKKKKKKE-TEMPLATE-073] initWMPRRequestsTable function not found, retrying in 500ms... (' + retryCount + '/' + maxRetries + ')');
                console.warn('[IKKKKKKE-TEMPLATE-074] Current window functions:', Object.keys(window).filter(k => typeof window[k] === 'function' && k.toLowerCase().includes('wmpr')));
                console.warn('[IKKKKKKE-TEMPLATE-075] Current window objects:', Object.keys(window).filter(k => typeof window[k] === 'object' && k.toLowerCase().includes('wmpr')));
                setTimeout(initWMPRReactComponent, 500);
                return false;
            } else {
                console.error('[IKKKKKKE-TEMPLATE-076] Failed to find initWMPRRequestsTable function after ' + maxRetries + ' attempts');
                console.error('[IKKKKKKE-TEMPLATE-077] Available window properties:', Object.keys(window).filter(k => k.toLowerCase().includes('wmpr')));
                console.error('[IKKKKKKE-TEMPLATE-078] All window properties:', Object.keys(window));
                fallbackToVanillaJS();
                return false;
            }
        }
    }
    
    function fallbackToVanillaJS() {
        console.log('[IKKKKKKE-TEMPLATE-079] Falling back to vanilla JavaScript implementation');
        fallbackMode = 'vanilla';
        
        // Hide loading indicator
        const loadingElement = document.getElementById('wmpr-loading-fallback');
        if (loadingElement) {
            loadingElement.style.display = 'none';
        }
        
        // Show fallback table
        const fallbackTable = document.getElementById('wmpr-fallback-table');
        if (fallbackTable) {
            fallbackTable.style.display = 'block';
        }
        
        // Load data with vanilla JS
        loadWMPRDataVanilla();
        
        // Setup refresh button
        const refreshBtn = document.getElementById('wmpr-refresh-btn');
        if (refreshBtn) {
            refreshBtn.addEventListener('click', loadWMPRDataVanilla);
        }
    }
    
    function loadWMPRDataVanilla() {
        console.log('[IKKKKKKE-TEMPLATE-080] Loading data with vanilla JavaScript');
        
        const tableBody = document.getElementById('wmpr-table-body');
        if (!tableBody) return;
        
        // Show loading state
        tableBody.innerHTML = '<tr><td colspan="5" style="padding: 20px; text-align: center; color: #626f86;">Loading requests...</td></tr>';
        
        // Make AJAX request
        var xhr = new XMLHttpRequest();
        xhr.open('GET', '/rest/wmpr-requests/1.0/recent', true);
        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4) {
                if (xhr.status === 200) {
                    try {
                        var data = JSON.parse(xhr.responseText);
                        console.log('[IKKKKKKE-TEMPLATE-081] Vanilla JS API response:', data);
                        renderVanillaTable(data);
                    } catch (error) {
                        console.error('[IKKKKKKE-TEMPLATE-082] Error parsing response:', error);
                        showBasicFallback();
                    }
                } else {
                    console.error('[IKKKKKKE-TEMPLATE-083] API request failed:', xhr.status, xhr.statusText);
                    showBasicFallback();
                }
            }
        };
        xhr.send();
    }
    
    function renderVanillaTable(data) {
        const tableBody = document.getElementById('wmpr-table-body');
        if (!tableBody) return;
        
        const requests = Array.isArray(data) ? data : (data.data || []);
        
        if (requests.length === 0) {
            tableBody.innerHTML = '<tr><td colspan="5" style="padding: 20px; text-align: center; color: #626f86;">No recent WMPR requests found.</td></tr>';
            return;
        }
        
        var html = '';
        for (var i = 0; i < requests.length; i++) {
            var request = requests[i];
            var statusColor = getStatusColor(request.statusCategory);
            var formattedDate = new Date(request.created).toLocaleDateString();
            
            html += '<tr style="border-bottom: 1px solid #f4f5f7;">';
            html += '<td style="padding: 8px;"><a href="/browse/' + request.key + '" target="_blank" style="color: #0052cc; text-decoration: none; font-weight: bold;">' + request.key + '</a></td>';
            html += '<td style="padding: 8px;" title="' + request.summary + '">' + (request.summary.length > 50 ? request.summary.substring(0, 50) + '...' : request.summary) + '</td>';
            html += '<td style="padding: 8px;">' + request.reporter + '</td>';
            html += '<td style="padding: 8px;">' + formattedDate + '</td>';
            html += '<td style="padding: 8px;"><span style="background: ' + statusColor + '; color: white; padding: 2px 8px; border-radius: 3px; font-size: 11px;">' + request.status + '</span></td>';
            html += '</tr>';
        }
        
        tableBody.innerHTML = html;
        console.log('[IKKKKKKE-TEMPLATE-084] Vanilla table rendered with ' + requests.length + ' requests');
    }
    
    function getStatusColor(category) {
        switch ((category || '').toLowerCase()) {
            case 'done': return '#36b37e';
            case 'indeterminate': return '#0052cc';
            case 'new': return '#ff5630';
            default: return '#6b778c';
        }
    }
    
    function showBasicFallback() {
        console.log('[IKKKKKKE-TEMPLATE-085] Showing basic fallback');
        fallbackMode = 'basic';
        
        // Hide other elements
        const loadingElement = document.getElementById('wmpr-loading-fallback');
        const fallbackTable = document.getElementById('wmpr-fallback-table');
        const basicFallback = document.getElementById('wmpr-basic-fallback');
        
        if (loadingElement) loadingElement.style.display = 'none';
        if (fallbackTable) fallbackTable.style.display = 'none';
        if (basicFallback) basicFallback.style.display = 'block';
    }
    
    // CRITICAL: Wait for web resources to load before initializing
    function waitForWebResources() {
        console.log('[IKKKKKKE-TEMPLATE-086] Waiting for web resources to load...');
        
        // Check if React and ReactDOM are available (from Jira)
        if (typeof window.React !== 'undefined' && typeof window.ReactDOM !== 'undefined') {
            console.log('[IKKKKKKE-TEMPLATE-087] React dependencies loaded, starting component initialization');
            // Small additional delay to ensure our bundle is loaded
            setTimeout(initWMPRReactComponent, 1000);
        } else {
            console.log('[IKKKKKKE-TEMPLATE-088] React dependencies not yet loaded, waiting...');
            setTimeout(waitForWebResources, 500);
        }
    }
    
    // Initialize when DOM and AJS are ready
    if (typeof AJS !== 'undefined' && AJS.toInit) {
        console.log('[IKKKKKKE-TEMPLATE-089] AJS available, using AJS.toInit');
        AJS.toInit(function() {
            console.log('[IKKKKKKE-TEMPLATE-090] AJS initialized, waiting for web resources...');
            waitForWebResources();
        });
    } else {
        // Fallback if AJS is not available
        console.log('[IKKKKKKE-TEMPLATE-091] AJS not available, using DOMContentLoaded');
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', function() {
                console.log('[IKKKKKKE-TEMPLATE-092] DOM loaded, waiting for web resources...');
                waitForWebResources();
            });
        } else {
            console.log('[IKKKKKKE-TEMPLATE-093] DOM already loaded, waiting for web resources...');
            waitForWebResources();
        }
    }
    
    console.log('[IKKKKKKE-TEMPLATE-094] Initialization script loaded and configured');
})();
</script> 