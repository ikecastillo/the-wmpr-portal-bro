<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="decorator" content="atl.general">
    <title>WMPR Settings - $projectName</title>
    
    ## CRITICAL: Load React dependencies and our settings bundle in the correct order
    $webResourceManager.requireResource("com.atlassian.jira.plugins.jira-react-plugin:react")
    $webResourceManager.requireResource("com.atlassian.auiplugin:ajs")
    $webResourceManager.requireResource("jira.webresources:jira-global")
    ## Load our React settings bundle - designed specifically for admin context
    $webResourceManager.requireResource("com.example.wmpr.backend:entrypoint-wmprSettings")
    <style>
        .wmpr-settings-container {
            max-width: 800px;
            margin: 20px auto;
            padding: 20px;
            background: white;
            border: 1px solid #dfe1e6;
            border-radius: 5px;
        }
        .wmpr-settings-form {
            margin-top: 20px;
        }
        .wmpr-form-group {
            margin-bottom: 20px;
        }
        .wmpr-form-group label {
            display: block;
            font-weight: bold;
            margin-bottom: 5px;
            color: #172b4d;
        }
        .wmpr-radio-group {
            margin: 10px 0;
        }
        .wmpr-radio-option {
            margin-bottom: 15px;
            padding: 10px;
            border: 1px solid #dfe1e6;
            border-radius: 3px;
            background: #f4f5f7;
        }
        .wmpr-radio-option input[type="radio"] {
            margin-right: 8px;
        }
        .wmpr-radio-option label {
            font-weight: normal;
            margin-bottom: 5px;
            cursor: pointer;
        }
        .wmpr-default-jql {
            background: #f8f9fa;
            border: 1px solid #e1e5e9;
            padding: 10px;
            margin-top: 8px;
            border-radius: 3px;
            font-family: monospace;
            font-size: 12px;
            color: #42526e;
        }
        .wmpr-custom-jql {
            width: 100%;
            height: 80px;
            margin-top: 8px;
            padding: 8px;
            border: 1px solid #dfe1e6;
            border-radius: 3px;
            font-family: monospace;
            font-size: 12px;
            resize: vertical;
        }
        .wmpr-buttons {
            margin-top: 20px;
            padding-top: 20px;
            border-top: 1px solid #dfe1e6;
        }
        .wmpr-button {
            padding: 8px 16px;
            margin-right: 10px;
            border: 1px solid #dfe1e6;
            border-radius: 3px;
            background: white;
            color: #172b4d;
            text-decoration: none;
            cursor: pointer;
            font-size: 14px;
        }
        .wmpr-button-primary {
            background: #0052cc;
            color: white;
            border-color: #0052cc;
        }
        .wmpr-button:hover {
            background: #f4f5f7;
        }
        .wmpr-button-primary:hover {
            background: #0065ff;
        }
        .wmpr-success-message {
            background: #e3fcef;
            border: 1px solid #36b37e;
            color: #006644;
            padding: 10px;
            border-radius: 3px;
            margin-bottom: 20px;
        }
        .wmpr-breadcrumb {
            margin-bottom: 20px;
            color: #626f86;
            font-size: 12px;
        }
        .wmpr-breadcrumb a {
            color: #0052cc;
            text-decoration: none;
        }
    </style>
    <script>
        function toggleJqlInput() {
            var customRadio = document.getElementById('jql-custom');
            var customTextarea = document.getElementById('customJql');
            
            if (customRadio.checked) {
                customTextarea.disabled = false;
                customTextarea.focus();
            } else {
                customTextarea.disabled = true;
            }
        }
        
        function validateForm() {
            var customRadio = document.getElementById('jql-custom');
            var customJql = document.getElementById('customJql').value.trim();
            
            if (customRadio.checked && customJql === '') {
                alert('Please enter a custom JQL query or select the default option.');
                return false;
            }
            
            return true;
        }
    </script>
</head>
<body>
    <!-- PROMINENT REACT TEST SECTION AT TOP -->
    <div id="main-react-test" style="
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 30px;
        margin: 20px;
        border-radius: 10px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.3);
        text-align: center;
        border: 3px solid #FFD700;
    ">
        <h1 style="margin: 0 0 15px 0; font-size: 28px; text-shadow: 2px 2px 4px rgba(0,0,0,0.5);">
            üöÄ ATLASKIT COMPONENT TEST AREA üöÄ
        </h1>
        <p style="margin: 0 0 20px 0; font-size: 18px; opacity: 0.9;">
            Testing React + AtlasKit Components for Plugin Development
        </p>
        <div id="main-settings-test-root" style="
            background: rgba(255,255,255,0.1);
            border: 2px dashed #FFD700;
            border-radius: 8px;
            padding: 20px;
            min-height: 100px;
            display: flex;
            align-items: center;
            justify-content: center;
            backdrop-filter: blur(10px);
        ">
            <div style="color: #FFD700; font-size: 16px; font-weight: bold;">
                ‚è≥ Loading React Component...
            </div>
        </div>
    </div>

    <!-- DIAGNOSTIC INFORMATION PANEL -->
    <div id="diagnostic-panel" style="
        background: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 20px;
        margin: 20px;
        font-family: monospace;
        font-size: 12px;
    ">
        <h3 style="margin: 0 0 15px 0; color: #495057;">üîç AtlasKit Development Diagnostics</h3>
        <div id="diagnostic-content">
            <p><strong>Page Load:</strong> <span id="diag-timestamp">Loading...</span></p>
            <p><strong>React Available:</strong> <span id="diag-react">Checking...</span></p>
            <p><strong>ReactDOM Available:</strong> <span id="diag-reactdom">Checking...</span></p>
            <p><strong>AJS Available:</strong> <span id="diag-ajs">Checking...</span></p>
            <p><strong>AtlasKit Available:</strong> <span id="diag-atlaskit">Checking...</span></p>
            <p><strong>WMPR Functions:</strong> <span id="diag-wmpr">Checking...</span></p>
            <p><strong>Bundle Status:</strong> <span id="diag-bundle">Loading...</span></p>
        </div>
    </div>

    <div class="wmpr-settings-container">
        <div class="wmpr-breadcrumb">
            <a href="/browse/$projectKey">$projectName</a> &gt; 
            <a href="/plugins/servlet/project-config/$projectKey">Project Settings</a> &gt; 
            WMPR Settings
        </div>
        
        <h2>WMPR Settings for $projectName</h2>
        <p>Configure how WMPR requests are displayed in the Service Desk portal.</p>
        
        #if($request.getParameter("saved"))
        <div class="wmpr-success-message">
            ‚úì Settings saved successfully!
        </div>
        #end
        
        <form method="post" class="wmpr-settings-form" onsubmit="return validateForm()">
            <input type="hidden" name="projectKey" value="$projectKey">
            
            <div class="wmpr-form-group">
                <label>JQL Query Configuration:</label>
                <p style="color: #626f86; font-size: 14px; margin-bottom: 15px;">
                    Choose how to filter WMPR requests displayed in the portal.
                </p>
                
                <div class="wmpr-radio-group">
                    <div class="wmpr-radio-option">
                        <label>
                            <input type="radio" 
                                   name="jqlOption" 
                                   value="default" 
                                   id="jql-default"
                                   #if(!$useCustomJql)checked#end
                                   onchange="toggleJqlInput()">
                            Use Default JQL Query
                        </label>
                        <div class="wmpr-default-jql">$defaultJql</div>
                    </div>
                    
                    <div class="wmpr-radio-option">
                        <label>
                            <input type="radio" 
                                   name="jqlOption" 
                                   value="custom" 
                                   id="jql-custom"
                                   #if($useCustomJql)checked#end
                                   onchange="toggleJqlInput()">
                            Use Custom JQL Query
                        </label>
                        <textarea name="customJql" 
                                  id="customJql"
                                  class="wmpr-custom-jql" 
                                  placeholder="Enter your custom JQL query here..."
                                  #if(!$useCustomJql)disabled#end>$currentJql</textarea>
                        <small style="color: #626f86; display: block; margin-top: 5px;">
                            Example: project = "MYPROJECT" AND status != "Done" ORDER BY created DESC
                        </small>
                    </div>
                </div>
            </div>
            
            <div class="wmpr-buttons">
                <input type="submit" value="Save Settings" class="wmpr-button wmpr-button-primary">
                <a href="/plugins/servlet/project-config/$projectKey" class="wmpr-button">Cancel</a>
            </div>
        </form>
    </div>
    
    <script>
        // Initialize the form state
        document.addEventListener('DOMContentLoaded', function() {
            toggleJqlInput();
        });
        
        // REACT/ATLASKIT TEST SCRIPT
        (function testReactAvailability() {
            console.log('[WMPR-SETTINGS-001] Starting React availability test...');
            
            // Update diagnostic panel
            function updateDiagnostic(id, value, isError = false) {
                const element = document.getElementById(id);
                if (element) {
                    element.textContent = value;
                    element.style.color = isError ? '#dc3545' : '#28a745';
                    element.style.fontWeight = 'bold';
                }
            }
            
            // Initial timestamp
            updateDiagnostic('diag-timestamp', new Date().toISOString());
            
            function performDiagnostics() {
                console.log('[WMPR-SETTINGS-DIAG] Performing comprehensive diagnostics...');
                
                // React checks
                const reactAvailable = typeof window.React !== 'undefined';
                updateDiagnostic('diag-react', reactAvailable ? `‚úÖ ${window.React?.version || 'unknown'}` : '‚ùå Not Found', !reactAvailable);
                
                const reactDOMAvailable = typeof window.ReactDOM !== 'undefined';
                updateDiagnostic('diag-reactdom', reactDOMAvailable ? '‚úÖ Available' : '‚ùå Not Found', !reactDOMAvailable);
                
                // AJS checks
                const ajsAvailable = typeof window.AJS !== 'undefined';
                updateDiagnostic('diag-ajs', ajsAvailable ? '‚úÖ Available' : '‚ùå Not Found', !ajsAvailable);
                
                // AtlasKit checks
                const atlaskitAvailable = ajsAvailable && window.AJS.AtlasKit;
                if (atlaskitAvailable) {
                    const components = Object.keys(window.AJS.AtlasKit);
                    updateDiagnostic('diag-atlaskit', `‚úÖ ${components.length} components: ${components.slice(0, 3).join(', ')}${components.length > 3 ? '...' : ''}`);
                } else {
                    updateDiagnostic('diag-atlaskit', '‚ùå AJS.AtlasKit Not Found', true);
                }
                
                // WMPR function checks
                const wmprFunctions = [];
                if (typeof window.initWMPRSettings === 'function') wmprFunctions.push('initWMPRSettings');
                if (typeof window.initWMPRRequestsTable === 'function') wmprFunctions.push('initWMPRRequestsTable');
                if (window.WMPR) wmprFunctions.push('WMPR object');
                
                updateDiagnostic('diag-wmpr', wmprFunctions.length > 0 ? `‚úÖ ${wmprFunctions.join(', ')}` : '‚ùå No WMPR functions found', wmprFunctions.length === 0);
                
                // Bundle status
                const scripts = Array.from(document.scripts);
                const wmprScripts = scripts.filter(s => s.src && s.src.includes('wmpr'));
                updateDiagnostic('diag-bundle', wmprScripts.length > 0 ? `‚úÖ ${wmprScripts.length} bundles loaded` : '‚ùå No WMPR bundles found', wmprScripts.length === 0);
                
                return { reactAvailable, reactDOMAvailable, ajsAvailable, atlaskitAvailable, wmprFunctions: wmprFunctions.length > 0 };
            }
            
            function showFallback(reason) {
                console.log('[WMPR-SETTINGS-002] React not available:', reason);
                const mainContainer = document.getElementById('main-settings-test-root');
                if (mainContainer) {
                    mainContainer.innerHTML = '<div style="color: #FFD700; font-size: 16px;">‚ùå ' + reason + '</div>';
                }
            }
            
            function showSuccess() {
                console.log('[WMPR-SETTINGS-003] React available, initializing component...');
                
                // Try to initialize our React settings component in MAIN section
                if (typeof window.initWMPRSettings === 'function') {
                    console.log('[WMPR-SETTINGS-004] Found WMPR Settings init function, testing...');
                    
                    try {
                        // Initialize MAIN prominent test section
                        console.log('[WMPR-SETTINGS-004a] Initializing MAIN test section...');
                        window.initWMPRSettings('main-settings-test-root', 'ATLASKIT DEVELOPMENT TEST');
                        console.log('[WMPR-SETTINGS-004b] ‚úÖ Main test component initialized!');
                        
                    } catch (error) {
                        console.error('[WMPR-SETTINGS-005] Error initializing React settings component:', error);
                        
                        // Show error in main section
                        const mainContainer = document.getElementById('main-settings-test-root');
                        if (mainContainer) {
                            mainContainer.innerHTML = '<div style="color: #FFD700; background: rgba(255,0,0,0.2); padding: 15px; border-radius: 8px;">‚ùå React Error: ' + error.message + '</div>';
                        }
                    }
                } else {
                    console.log('[WMPR-SETTINGS-006] WMPR Settings init function not found');
                    
                    // Show message in main section
                    const mainContainer = document.getElementById('main-settings-test-root');
                    if (mainContainer) {
                        mainContainer.innerHTML = '<div style="color: #FFD700; font-size: 16px;">‚ö†Ô∏è React available but WMPR Settings bundle not loaded</div>';
                    }
                }
            }
            
            // Perform diagnostics immediately
            const initialDiagnostics = performDiagnostics();
            
            // Test React availability with enhanced checks
            setTimeout(function() {
                const finalDiagnostics = performDiagnostics();
                
                if (!finalDiagnostics.reactAvailable) {
                    showFallback('React is not available (window.React is undefined)');
                } else if (!finalDiagnostics.reactDOMAvailable) {
                    showFallback('ReactDOM is not available (window.ReactDOM is undefined)');
                } else if (!finalDiagnostics.ajsAvailable) {
                    showFallback('AJS is not available - AtlasKit components may not work');
                } else {
                    showSuccess();
                }
            }, 3000); // Wait 3 seconds for all resources to load
            
            // Periodic diagnostics update
            setInterval(performDiagnostics, 5000);
        })();
    </script>
</body>
</html> 